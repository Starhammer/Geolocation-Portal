@model Geolocation_Portal_Test.Models.record

@{
    ViewBag.Title = "Record";
}

@using (Html.BeginForm("Recorderstellung", "OpenData", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <form>
            <h1>Datensatz hinzufügen</h1>
            <hr />

            <div class="form-group row">
                @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "col-3" })
                <div class="col-9">
                    @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control mw-100" } })
                    @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.licence_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("licence_id", null, htmlAttributes: new { @class = "form-control mw-100", @id = "licence_dropDownList" })
                    @Html.ValidationMessageFor(model => model.licence_id, "", new { @class = "text-danger" })
                </div>
            </div>

            <script>
                function dropDownListElementChanged() {

                }

                $('#licence_dropDownList').change(function () {
                    var SelectedValue = $(this).val();

                    $('#licence_desc').InnerHtml(@Html.Raw(ViewBag.licence_descriptions[0]));

                    console.log(SelectedValue);
                });
            </script>

            <h6 class="text-info">Hinweis:</h6>
            <p id="licence_desc" class="text-info">

            </p>

            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.role_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("role_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.role_id, "", new { @class = "text-danger" })
                </div>
            </div>

            <p class="text-info">
                Hinweis:<br />
                @Html.Display("role_description")
            </p>

            <div class="form-group">
                @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "" })
                @Html.TextAreaFor(model => model.description, htmlAttributes: new { @rows = "10", @class = "form-control mw-100", @maxlength = "3000" })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.category_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("category_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.category_id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.location_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("location_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.location_id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.publisher_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("publisher_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.publisher_id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="table-responsive">
                    <table class="table" id="uploadTable" style="visibility:hidden;">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Name</th>
                                <th>Größe</th>
                            </tr>
                        </thead>
                        <tbody id="uploadTable_body"></tbody>
                    </table>
                </div>
                <div class="col">
                    <b>Dateien und Quellen:</b>
                    <br/>
                    Wählen Sie nun einige Dateien aus, welche Sie zu diesem Datensatz veröffentlichen möchten. Denken Sie daran, dass es sich inhaltlich nur um eine Datei handeln sollte. Sie können Ihre Datei aber mit unterschiedlichen Dateiendungen hochladen, um den Besuchern ihre Datei besser zur Verfügung zu stellen.
                </div>
                <div class="col">
                    @Html.TextBox("files", "", htmlAttributes: new { @type = "file", @multiple = "true" })
                </div>

            </div>
            <br />

            <!-- ToDo: Hier soll eine Tabelle erstellt werden, in welcher die Dateien zwischengespeichert werden. Jede Zeile soll einen Mülleimer zum Entfernen der Datei haben. -->
            <!-- Default checked -->
            <div class="custom-control custom-radio">
                <input type="radio" class="custom-control-input" id="radioNormal" name="dataTyp" value="normal" checked>
                <label class="custom-control-label" for="radioNormal">Dieser Datensatz beinhaltet keine geografischen oder visualisierende Daten</label>
            </div>
            <br />
            <!-- Default unchecked -->
            <div class="custom-control custom-radio">
                <input type="radio" class="custom-control-input" id="radioGeoFile" name="dataTyp" value="geoData">
                <label class="custom-control-label" for="radioGeoFile">Dieser Datensatz beinhaltet geografische Daten</label>
            </div>
            <br />
            <div class="custom-control custom-radio">
                <input type="radio" class="custom-control-input" id="radioDiagram" name="dataTyp" value="diaData">
                <label class="custom-control-label" for="radioDiagram">Dieser Datensatz beinhaltet visualisierende Daten</label>
            </div>
            <br />
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.record_active, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.EditorFor(model => model.record_active)
                    @Html.ValidationMessageFor(model => model.record_active, "", new { @class = "text-danger" })
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Datensatz hochladen</button>
            <br />
            <br />

        </form>
    </div>
}

<script type="text/javascript">
    var validateFileUpload = function () {
        document.getElementById("uploadTable").style.visibility = "visible";

        var filelist = document.getElementById("files").files || [];
        console.log(filelist);
        for (var i = 0; i < filelist.length; i++) {
            var file_name = filelist[i].name;
            var file_size = filelist[i].size

            
            var table = document.getElementById("uploadTable_body"),
                row = document.createElement("tr"),
                col1 = document.createElement("td"),
                col2 = document.createElement("td");
                col3 = document.createElement("td");

                col1.appendChild(document.createTextNode(i + 1));
                col2.appendChild(document.createTextNode(file_name));
            col3.appendChild(document.createTextNode(file_size));
                row.appendChild(col1);
            row.appendChild(col2);
            row.appendChild(col3);
                table.appendChild(row);
            
        }
    }
    document.getElementById("files").onchange = validateFileUpload;
</script>