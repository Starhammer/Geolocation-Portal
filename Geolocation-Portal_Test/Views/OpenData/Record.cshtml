@model Geolocation_Portal_Test.Models.record

@{
    ViewBag.Title = "Record";
}

@using (Html.BeginForm("Record", "OpenData", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <form>
            <h1>Datensatz hinzufügen</h1>
            <hr />

            <div class="form-group row">
                @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "col-3" })
                <div class="col-9">
                    @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control mw-100" } })
                    @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.licence_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("licence_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.licence_id, "", new { @class = "text-danger" })
                </div>
            </div>

            <p class="text-info">
                Hinweis:<br />
                @Html.Display("role_description")
            </p>

            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.role_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("role_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.role_id, "", new { @class = "text-danger" })
                </div>
            </div>

            <p class="text-info">
                Hinweis:<br />
                @Html.Display("role_description")
            </p>

            <div class="form-group">
                @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "" })
                @Html.TextAreaFor(model => model.description, htmlAttributes: new { @rows = "10", @class = "form-control mw-100", @maxlength = "3000" })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.category_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("category_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.category_id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.location_id, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.DropDownList("location_id", null, htmlAttributes: new { @class = "form-control mw-100" })
                    @Html.ValidationMessageFor(model => model.location_id, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col">
                    Dateien und Quellen *
                </div>
                <div class="col">
                    @Html.TextBox("files", "", htmlAttributes: new { @type = "file", @multiple = "true" })

                </div>
            </div>
            <br />

            <!-- ToDo: Hier soll eine Tabelle erstellt werden, in welcher die Dateien zwischengespeichert werden. Jede Zeile soll einen Mülleimer zum Entfernen der Datei haben. -->


            <!-- Default checked -->
            <div class="custom-control custom-radio">
                <input type="radio" class="custom-control-input" id="radioNormal" name="dataTyp" value="normal" checked>
                <label class="custom-control-label" for="radioNormal">Dieser Datensatz beinhaltet keine geografischen oder visualisierende Daten</label>
            </div>
            <br />
            <!-- Default unchecked -->
            <div class="custom-control custom-radio">
                <input type="radio" class="custom-control-input" id="radioGeoFile" name="dataTyp" value="geoData">
                <label class="custom-control-label" for="radioGeoFile">Dieser Datensatz beinhaltet geografische Daten</label>
            </div>
            <br />
            <div class="custom-control custom-radio">
                <input type="radio" class="custom-control-input" id="radioDiagram" name="dataTyp" value="diaData">
                <label class="custom-control-label" for="radioDiagram">Dieser Datensatz beinhaltet visualisierende Daten</label>
            </div>
            <br />
            <div class="form-group row">
                <div class="col-3">
                    @Html.LabelFor(model => model.record_active, htmlAttributes: new { @class = "" })
                </div>
                <div class="col-9">
                    @Html.EditorFor(model => model.record_active)
                    @Html.ValidationMessageFor(model => model.record_active, "", new { @class = "text-danger" })
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Datensatz hochladen</button>
            <br />
            <br />
            * Die hochgeladenen Dateien sollen trotz verschiedenen Dateiformate inhaltlich identisch sein.

        </form>
    </div>
}