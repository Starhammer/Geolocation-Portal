@model IEnumerable<Geolocation_Portal_Test.Models.record>

@{
    ViewBag.Title = "Open-Data der Stadt Mosbach";
}

<h1>Open Data Portal</h1>
<hr />

<div id="toolBar">
    <div>
        <a class="nolink" href="~/GeoData/index/0" id="" title="Gesammelte Geo-Datensätze auf einer Karte anzeigen"><i class="fa fa-map-marker"></i><sub><span id="geoDataShoppingCartCount"></span></sub></a>
        <a class="nolink" href="javascript:void(0);" id="search_button" title="Suchen"><i class="fa fa-search"></i></a>
        <a class="nolink" href="javascript:void(0);" id="sort_settings_button" title="Sortieren"><i class="fa fa-sort-amount-asc"></i></a>
        <a class="nolink" href="javascript:void(0);" id="filter_button" title="Filtern"><i class="fa fa-filter"></i></a>
        @if (Session["UserRole"] != null && Convert.ToInt32(Session["UserRole"]) < 3)
        {
            <a class="nolink" href="@Url.Action("Recorderstellung", "OpenData")" title="Datensatz hinzufügen"><i class="fa fa-plus"></i></a>

            <a id="showAllRecords_button" class="nolink hideLink" href="@Url.Action("Index", "OpenData", new { restriction_string = "all_records" })" title="Inaktive Datensätze anzeigen">
                <i class="fa fa-eye"></i>
            </a>

            <a id="showActivatedRecords_button" class="nolink hideLink" href="@Url.Action("Index", "OpenData", new { restriction_string = "all_active_records" })" title="Inaktive Datensätze ausblenden">
                <i class="fa fa-eye-slash"></i>
            </a>
        }
    </div>

    <!-- Start of the search function -->
    <div id="search" style="display: none;">
        @using (Html.BeginForm("Index", "OpenData", FormMethod.Post, htmlAttributes: new { @class = "n-column-wrapper" }))
        {
            <input class="float-right form-control" type="search" placeholder="Suchbegriff..." aria-label="Search" name="search" required="required" pattern="[A-Za-z0-9]{1,20}" />
            <button class="btn btn-primary float-right" style="width: 200px; margin-left: 5px;" type="submit" name="submit">Suchen</button>
        }
    </div>
    <!-- End of the search function -->

    <!-- Start of the filter function -->
    <div id="filter_settings" style="display: none; text-align: left;">
        <ul class="list-inline" style="margin: 0;">
            <li class="list-inline-item"><a class="nolink" href="#" id="filter_settings_category_button" title="Nach Kateogiren filtern">Kategorien</a></li>
            <li class="list-inline-item"><a class="nolink" href="@Url.Action("Index", "OpenData", new { restriction_string = "geo_records" })" title="Nach Geo-Datensätzen filtern">Geo-Datensätze</a></li>
            <li class="list-inline-item"><a class="nolink" href="@Url.Action("Index", "OpenData", new { restriction_string = "dia_records" })" title="Nach Diagramm-Datensätzen filtern">Diagramm-Datensätze</a></li>
            <li class="list-inline-item"><a class="nolink" href="#" id="filter_settings_upload_date_button" title="Nach Upload Datum filtern">Nach Upload-Datum filtern</a></li>
            <li class="list-inline-item"><a class="nolink" href="#" id="filter_settings_file_type_button" title="Nach Dateityp filtern">Nach Dateityp filtern</a></li>
        </ul>
    </div>
    <div id="filter_settings_categories" style="display: none; text-align: left;">
        @foreach (var item in ViewBag.category)
        {
            <a href="@Url.Action("Index", "OpenData", new { categoryID = item.Id })"><img class="icon" width="20" height="20" src="~/icons/Category/@item.icon" title="@item.name" /></a>
        }
    </div>
    <div id="filter_settings_upload_date" style="display: none; text-align: left;">
        <ul class="list-inline" style="margin: 0;">
            <li class="list-inline-item"><a class="nolink" href="#">Letzte Woche</a></li>
            <li class="list-inline-item"><a class="nolink" href="#">Letzten Monat</a></li>
            <li class="list-inline-item"><a class="nolink" href="#">Dieses Jahr</a></li>
        </ul>
    </div>
    <div id="filter_settings_file_type" style="display: none; text-align: left;">
        <ul class="list-inline" style="margin: 0;">
            <li class="list-inline-item"><a class="nolink" href="#">.docx</a></li>
            <li class="list-inline-item"><a class="nolink" href="#">.pdf</a></li>
            <li class="list-inline-item"><a class="nolink" href="#">.geojson</a></li>
        </ul>
    </div>
    <!-- End of the filter function -->

    <!-- Start of the sort function -->
    <div id="sort_settings" style="display: none; text-align: left;">
        <ul class="list-inline" style="margin: 0;">
            <li class="list-inline-item"><a class="nolink" href="@Url.Action("Index", "OpenData", new { restriction_string = "sort_alpha_asc" })" title="Nach Kateogiren filtern"><i class="fa fa-sort-alpha-asc"></i></a></li>
            <li class="list-inline-item"><a class="nolink" href="@Url.Action("Index", "OpenData", new { restriction_string = "sort_alpha_desc" })" title="Nach Geo-Datensätzen filtern"><i class="fa fa-sort-alpha-desc"></i></a></li>
            <li class="list-inline-item"><a class="nolink" href="@Url.Action("Index", "OpenData", new { restriction_string = "sort_date_asc" })" title="Nach Diagramm-Datensätzen filtern"><i class="fa fa-arrow-down"></i><i class="fa fa-calendar"></i></a></li>
            <li class="list-inline-item"><a class="nolink" href="@Url.Action("Index", "OpenData", new { restriction_string = "sort_date_desc" })" title="Nach Diagramm-Datensätzen filtern"><i class="fa fa-arrow-up"></i><i class="fa fa-calendar"></i></a></li>
        </ul>
    </div>
    <!-- End of the sort function -->
</div>

<p id="userInfoMessage">
    @if (ViewBag.userInfoMessage != null)
    {
        // Output of the number of search results.
        @ViewBag.userInfoMessage
        if (ViewBag.resetRestriction)
        {
            <a href="@Url.Action("Index", "OpenData")">Alle Datensätze anzeigen</a>
        }
    }
</p>

<div id="record-overview" class="card-columns">
    @foreach (var item in Model)
    {
        <div class="card bg-light mb-3" style="max-width: 40rem;">
            <div class="card-block">
                <div class="card-header record-overview-header">
                    <img class="icon" width="20" height="20" src="~/icons/Category/@Html.DisplayFor(modelItem => item.category.icon)" title="@Html.DisplayFor(modelItem => item.category.name)" />
                    <a class="nolink font-weight-bold" href="@Url.Action("Recorddetails", "OpenData", new { id = item.Id })" title="Details anzeigen">
                        @if (item.title.ToString().Length > 26)
                        {
                            // On the overview page, the descriptions should be no longer than 20 characters.
                            // To retain umlauts after the ToString() method, the string must be encoded.
                            string record_title = item.title.ToString();
                            byte[] utf8_bytes = System.Text.Encoding.UTF8.GetBytes(record_title);
                            var title_substring = System.Text.Encoding.UTF8.GetString(utf8_bytes);
                            title_substring = title_substring.ToString().Substring(0, 26);

                            @title_substring
                            <span>...</span>
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.title)
                        }
                    </a>

                        @if (Session["UserRole"] != null && Convert.ToInt32(Session["UserRole"]) < 3)
                        {
                            // Role concept: Administrator (id = 1) and key user (id = 2) may edit and delete data records.
                            <div class="fa-pull-right">
                                <a class="nolink" href="@Url.Action("Recordbearbeitung", "OpenData", new { id = item.Id })" title="Datensatz bearbeiten"><i class="fa fa-edit"></i></a>
                                <a class="nolink" href="@Url.Action("Recordentfernung", "OpenData", new { id = item.Id })" title="Datensatz löschen"><i class="fa fa-trash"></i></a>
                            </div>
                        }
                </div>
                <div class="card-body record-overview-body">
                    <div class="card-subtitle">
                        <div class="d-flex justify-content-between">
                            <span>
                                <i class="fa fa-calendar"></i>
                                @Html.DisplayFor(modelItem => item.dataset_modified_date.ToString("dd/MM/yyyy").Split(new char[] { ' ' })[0])
                            </span>
                            <span><i class="fa fa-download"></i> @item.file.Sum(f => f.download_count)</span>
                            @Html.Partial("_rating", item.rating)
                        </div>
                    </div>
                    <p class="card-text">
                        @if (item.description.ToString().Length > 120)
                        {
                            // On the overview page, the descriptions should be no longer than 100 characters.
                            // To retain umlauts after the ToString() method, the string must be encoded.
                            string record_description = item.description.ToString();
                            byte[] utf8_bytes = System.Text.Encoding.UTF8.GetBytes(record_description);
                            var description_substring = System.Text.Encoding.UTF8.GetString(utf8_bytes);
                            description_substring = description_substring.ToString().Substring(0, 120);

                        @description_substring
                        <span>...</span>
                        }
                        else
                        {
                        @Html.DisplayFor(modelItem => item.description)
                        }
                    </p>
                    <div class="text-right">
                        <a href="@Url.Action("Recorddetails", "OpenData", new { id = item.Id })" title="Details anzeigen">Weiterlesen</a>
                    </div>
                </div>
                <div class="card-footer record-overview-footer" style="min-height:50px;">
                    @foreach (var file in item.file)
                    {
                        //
                        if (item.geo_data == true)
                        {
                            <span>
                                <a class="nolink float-right ml-2" href="~/GeoData/index/@item.Id" title="Vorschau auf der Karte"><i class="fa fa-map"></i></a>

                                <a class="nolink float-right ml-2" href="javascript:void(0);" onclick="addMapRecordToShoppingCart(@item.Id)" title="Zum Kartenwarenkorb hinzufügen">
                                    <i class="fa fa-map-marker" id="@item.Id"></i>
                                </a>
                            </span>
                        }
                        else if (item.dia_data == true)
                        {
                            <span>
                                <a class="nolink float-right ml-2" href="~/DiagramData/index/@item.Id" title="Vorschau als Diagramm"><i class="fa fa-pie-chart"></i></a>
                            </span>
                        }

                        <span>
                            <a href="@Url.Action("Download", "OpenData", new { fileName = file.name, recordId = item.Id })">
                                <img class="float-left mr-2" width="25" height="25" src="~/icons/@Html.DisplayFor(modelItem => file.file_icon)-icon.png" />
                            </a>
                        </span>

                    }
                </div>
            </div>
        </div>
    }
</div>

<script type="text/javascript">

    /**
     * Contains all jQuery functions, because they refer to an ID. If the document is not fully loaded, the ID cannot be found and an error occurs.
     */
    jQuery(document).ready(function () {
        // Display the count of geodata in the geodata shopping cart.
        if (localStorage["MapRecordShoppingCart"] != null) {
            var jsonRecordList = JSON.parse(localStorage["MapRecordShoppingCart"]);
            var i = Object.keys(jsonRecordList.recordIDs).length;
            $('#geoDataShoppingCartCount').html(i);

            for (var key in jsonRecordList.recordIDs) {
                var recordAddToCartIconID = "#" + jsonRecordList.recordIDs[key];
                $(recordAddToCartIconID).addClass("color-blue");
            }
        }

        // Displays either the "Show all records" or "Show all active records" icon.
        if (localStorage["showAllRecords"] != null && JSON.parse(localStorage["showAllRecords"]) == true) {
            if ($("#showActivatedRecords_button").hasClass("hideLink")) {
                $("#showActivatedRecords_button").removeClass("hideLink");
            }
        } else {
            if ($("#showAllRecords_button").hasClass("hideLink")) {
                $("#showAllRecords_button").removeClass("hideLink");
            }
        }

        /**
         * When the page is loaded for the first time, the required local memory variables must be created.
         */
        $(window).on("load", function () {
            if (localStorage["showAllRecords"] == null) {
                localStorage["showAllRecords"] = false;
            }
        });

        /**
         * When the user clicks on the "ShowAllRecords" button, the local memory variable must be changed.
         */
        $("#showAllRecords_button").on('click touchstart', function (e) {
            e.stopPropagation(); // stops 'ghost clicks' (double clicking)

            if (JSON.parse(localStorage["showAllRecords"]) != null) {
                localStorage["showAllRecords"] = true;
            }
        });

        /**
         * When the user clicks on the "ShowActivatedRecords" button, the local memory variable must be changed.
         */
        $("#showActivatedRecords_button").on('click touchstart', function () {
            if (JSON.parse(localStorage["showAllRecords"]) != null) {
                localStorage["showAllRecords"] = false;
            }
        });

        /**
         * When the user clicks on the Filter button, the filter settings are displayed or hidden. When hiding, all sub-settings must also be hidden.
         */
        $("#filter_button").on('click touchstart', function() {
            if ($("#filter_settings_category_button").hasClass("myactive")) {
                $("#filter_settings_categories").slideToggle("slow");
            }

            if ($("#filter_settings_upload_date_button").hasClass("myactive")) {
                $("#filter_settings_upload_date").slideToggle("slow");
            }

            if ($("#filter_settings_file_type_button").hasClass("myactive")) {
                $("#filter_settings_file_type").slideToggle("slow");
            }

            $("#filter_settings").slideToggle("slow");

            changeActiveState("#filter_button");
        });

        /**
         * When the user clicks on Category Filtering in the filter settings, the category filter settings are shown or hidden.
         */
        $("#filter_settings_category_button").on('click touchstart', function() {
            $("#filter_settings_categories").slideToggle("slow");

            changeActiveState("#filter_settings_category_button");
        });

        /**
         * When the user clicks on Upload Date Filtering in the filter settings, the upload date filter settings are shown or hidden.
         */
        $("#filter_settings_upload_date_button").on('click touchstart', function () {
            $("#filter_settings_upload_date").slideToggle("slow");

            changeActiveState("#filter_settings_upload_date_button");
        });

        /**
         * When the user clicks on File Type Filtering in the filter settings, the file type filter settings are shown or hidden.
         */
        $("#filter_settings_file_type_button").on('click touchstart', function () {
            $("#filter_settings_file_type").slideToggle("slow");

            changeActiveState("#filter_settings_file_type_button");
        });

        /**
         * When the user clicks on Sort in the toolbar settings, the sort settings are shown or hidden.
         */
        $("#sort_settings_button").on('click touchstart', function () {
            $("#sort_settings").slideToggle("slow");

            changeActiveState("#sort_settings_button");
        })

        /**
         * When the user clicks on Search in the toolbar settings, the search settings are shown or hidden.
         */
        $("#search_button").on('click touchstart', function () {
            $("#search").slideToggle("slow");

            changeActiveState("#search_button");
        });
    });

    /**
     * This method collapses the settings boxes again when a parent element is collapsed, by adding or deleting a class.
     * 
     * param: button_id = the id of the button to add or remove the class.
     */
    function changeActiveState(button_id) {
        if ($(button_id).hasClass("myactive")) {
            $(button_id).removeClass("myactive");
        } else {
            $(button_id).addClass("myactive");
        }
    }

    /**
     * Add a Record ID to a map shopping cart to display multiple geographical data on the map at once.
     * param recordID = The id to add or remove
     */
    function addMapRecordToShoppingCart(recordID) {
        console.log("addMapRecordToShoppingCart Method start------------------------------------------");

        if (recordID != null) {
            console.log("Record ID = " + recordID);

            // Check if session variable exists.
            if (localStorage["MapRecordShoppingCart"] == null) {
                console.log("MapRecordShoppingCart was null and is now empty");
                localStorage["MapRecordShoppingCart"] = '{"recordIDs":[]}';
            }

            // Parse session variable value to string.
            var jsonRecordList = JSON.parse(localStorage["MapRecordShoppingCart"]);

            console.log("loop over all keys in json array");
            var isRecordKeyFound = -1;

            for (var key in jsonRecordList.recordIDs) {
                console.log(key + " -> " + jsonRecordList.recordIDs[key]);

                var id = jsonRecordList.recordIDs[key] ;
                console.log("The id in the json object is: " + id);
                if (id == recordID) {
                    console.log("recordID always exist");
                    isRecordKeyFound = key;
                    break;
                }
            }
            
            var recordAddToCartIconID = "#" + recordID;
            // Add new id to the shopping cart.
            if (isRecordKeyFound < 0) {
                jsonRecordList.recordIDs.push(recordID);
                $(recordAddToCartIconID).addClass("color-blue");
            } else {
                jsonRecordList.recordIDs.splice(isRecordKeyFound, 1);
                $(recordAddToCartIconID).removeClass("color-blue");
                console.log("record deleted");
            }

            jsonStr = JSON.stringify(jsonRecordList);

            console.log(jsonStr);

            localStorage["MapRecordShoppingCart"] = jsonStr;

            // Add to shopping-cart
            var i = Object.keys(jsonRecordList.recordIDs).length;
            $('#geoDataShoppingCartCount').html(i);
            console.log("Json Array length: " + i);

        } else {
            console.error("id of record is null");
        }

        console.log("addMapRecordToShoppingCart Method  end------------------------------------------");
    }
</script>
