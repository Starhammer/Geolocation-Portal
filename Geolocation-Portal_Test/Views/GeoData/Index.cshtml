
@{
    ViewBag.Title = "Karte";
}

<h1>Geo Data Vorschau</h1>

@section Styles
{
    <script src='https://api.mapbox.com/mapbox.js/v3.2.0/mapbox.js'></script>
    <link href='https://api.mapbox.com/mapbox.js/v3.2.0/mapbox.css' rel='stylesheet' />
}

<!-- flex-direction muss auf dem Smartphone auf column geändert werden. -->
<div class="map-container">
    <div style="width: 100%;">

        <div id='map'>
        </div>
    </div>

    <aside style="max-width: 350px; padding: 10px;">
        <h2 style="margin: 0; margin-bottom: 10px; padding: 0;">Datensätze:</h2>

        <nav id="filters"></nav>
    </aside>
</div>

<script>
    // öffentlicher Mapbox Access Token --> Free use
    L.mapbox.accessToken = "pk.eyJ1IjoibWlja3JlMTciLCJhIjoiY2s1ZjVtZ2czMmhleDNmbGo2N3d3dnp0eiJ9.CQfwridE_34CUIrMBQ-h1Q";

    var map = L.mapbox.map('map')
        .setView([49.348641, 9.142345], 13)
        .addLayer(L.mapbox.styleLayer('mapbox://styles/mapbox/streets-v11'));
    // Satellite: /satellite-v9

    map.scrollWheelZoom.disable();

    var myFeatureLayer = L.mapbox.featureLayer().loadURL("/api/data/@ViewBag.FileId").addTo(map);

    // Find and store a variable reference to the list of filters.
    var filters = document.getElementById('filters');

    // Wait until the marker layer is loaded in order to build a list of possible
    // types. If you are doing this with another featureLayer, you should change
    // map.featureLayer to the variable you have assigned to your featureLayer.
    myFeatureLayer.on('ready', function () {
        // Collect the types of symbols in this layer. you can also just
        // hardcode an array of types if you know what you want to filter on,
        // like var types = ['foo', 'bar'];
        var typesObj = {}, types = [];
        var features = myFeatureLayer.getGeoJSON().features;

        for (var i = 0; i < features.length; i++) {
            typesObj[features[i].properties['marker-symbol']] = true;
        }

        addPopups();

        for (var k in typesObj) types.push(k);

        var checkboxes = [];

        // Create a filter interface.
        for (var i = 0; i < types.length; i++) {
            // Create an an input checkbox and label inside.
            var item = filters.appendChild(document.createElement('div'));
            var checkbox = item.appendChild(document.createElement('input'));
            var label = item.appendChild(document.createElement('label'));

            checkbox.type = 'checkbox';
            checkbox.id = types[i];
            checkbox.checked = true;

            // create a label to the right of the checkbox with explanatory text
            label.innerHTML = types[i];
            label.setAttribute('for', types[i]);

            // Whenever a person clicks on this checkbox, call the update().
            checkbox.addEventListener('change', update);
            checkboxes.push(checkbox);
        }

        // Zoomt die Karte so, dass alle Marker zu sehen sind.
        map.fitBounds(myFeatureLayer.getBounds());

        // This function is called whenever someone clicks on a checkbox and changes
        // the selection of markers to be displayed.
        function update() {
            var enabled = {};

            // Run through each checkbox and record whether it is checked. If it is,
            // add it to the object of types to display, otherwise do not.
            for (var i = 0; i < checkboxes.length; i++) {
                if (checkboxes[i].checked) enabled[checkboxes[i].id] = true;
            }

            myFeatureLayer.setFilter(function (feature) {
                // If this symbol is in the list, return true. if not, return false.
                // The 'in' operator in javascript does exactly that: given a string
                // or number, it says if that is in a object.
                // 2 in { 2: true } // true
                // 2 in { } // false
                return (feature.properties['marker-symbol'] in enabled);
            });

            addPopups();
        }

        function addPopups() {
            // Bind a popup to each feature in hospitalLayer and libraryLayer
            myFeatureLayer.eachLayer(function (layer) {
                var popupcontent = '<div><table><th>Details</th>';

                for (var prop in layer.feature.properties) {
                    popupcontent += '<tr>';
                    popupcontent += '<td>' + prop + ':</td><td>' + layer.feature.properties[prop] + '</td>';
                    popupcontent += '<tr>';
                }
            
                popupcontent += '</table></div>';

                layer.bindPopup(popupcontent, { closeButton: false });
            }).addTo(map);

            // Open popups on hover
            myFeatureLayer.on('click', function(e) {
                e.layer.openPopup();
            });
        }
    });
</script>